︠0b92ade0-3ef3-4d90-8328-ead5a8ed92f4si︠
%html
<p>This is an introductory worksheet that is attempting to mimic a successful Matlab primer <a title="Matlab primer" href="http://terpconnect.umd.edu/~nsw/ench250/primer.htm#sec00" target="_blank">http://terpconnect.umd.edu/~nsw/ench250/primer.htm#sec00</a>.&nbsp;</p>
<p>We shall follow their structure with the Python/Numpy/Scipy/Matplotlib commands, thanks to the great Sage notebook project</p>
<p>&nbsp;</p>

<p>Everything in Numpy (the numeric package build on top of an open source and free Python language) is a multi-dimensional array (in Matlab it's called a matrix, but this is almost the same for all practical purposes).&nbsp;</p>
<h4><a name="sec02">Entering matrices</a></h4>
<p><a name="sec02">
<p><a name="sec02">
<p style="display: inline !important;">Arrays can be introduced in several different ways:</p>
</a><a name="sec02">
<p style="display: inline !important;">&nbsp;</p>
</a></p>
</a></p>
<ul>
<a name="sec02">
<li>Entered by an explicit list of elements, converted from Python lists, e.g. array, asarray, ...</li>
<li>Generated by built-in statements and functions, see random.random, sin, ...</li>
</a>
<li>Loaded from external data files, see loadtxt, genfromtxt, xlrd, ...</li>
</ul>
<p>For example:</p>
<p>&nbsp;</p>

︡7bcdbeff-5b63-4a24-b57a-57d611ccbb0c︡{"html":"<p>This is an introductory worksheet that is attempting to mimic a successful Matlab primer <a title=\"Matlab primer\" href=\"http://terpconnect.umd.edu/~nsw/ench250/primer.htm#sec00\" target=\"_blank\">http://terpconnect.umd.edu/~nsw/ench250/primer.htm#sec00</a>.&nbsp;</p>\n<p>We shall follow their structure with the Python/Numpy/Scipy/Matplotlib commands, thanks to the great Sage notebook project</p>\n<p>&nbsp;</p>\n\n<p>Everything in Numpy (the numeric package build on top of an open source and free Python language) is a multi-dimensional array (in Matlab it's called a matrix, but this is almost the same for all practical purposes).&nbsp;</p>\n<h4><a name=\"sec02\">Entering matrices</a></h4>\n<p><a name=\"sec02\">\n<p><a name=\"sec02\">\n<p style=\"display: inline !important;\">Arrays can be introduced in several different ways:</p>\n</a><a name=\"sec02\">\n<p style=\"display: inline !important;\">&nbsp;</p>\n</a></p>\n</a></p>\n<ul>\n<a name=\"sec02\">\n<li>Entered by an explicit list of elements, converted from Python lists, e.g. array, asarray, ...</li>\n<li>Generated by built-in statements and functions, see random.random, sin, ...</li>\n</a>\n<li>Loaded from external data files, see loadtxt, genfromtxt, xlrd, ...</li>\n</ul>\n<p>For example:</p>\n<p>&nbsp;</p>\n\n"}︡
︠bea67e6c-a27e-4818-add0-8cbe1c19138c︠
from pylab import *
A=array([1,2,3,4,5,6,7,8,9]).reshape(3,3)
print A
B = array([[1,2,3],[4,5,6],[7,8,9]])
print B
C = rand(3,3)
print C
︡4f484ae8-6a16-4ccf-b70a-894434b26465︡{"stdout": "[[1 2 3]\n [4 5 6]\n [7 8 9]]\n[[1 2 3]\n [4 5 6]\n [7 8 9]]\n[[ 0.55949675  0.58635003  0.51970071]\n [ 0.15546665  0.96680251  0.33552036]\n [ 0.93826077  0.48511958  0.54093742]]"}︡
︠01ca22b5-37dc-4b57-a160-a6dfc7833a40i︠
%html
<p>creates the 9 element array (index from 0 to 8) and reshaped into an obvious 3-by-3 matrix and assigns it to a variable&nbsp;<tt>A. Alternative way to create 3 x 3 matrix is to give in in square brackets, as in B assignment.</tt></p>
<p>The built-in functions&nbsp;<tt>rand</tt>,&nbsp;<tt>magic</tt>, and&nbsp;<tt>hilb</tt>, for example, provide an easy way to create matrices with which to experiment. The command&nbsp;<tt>rand(3,3)</tt>&nbsp;created an&nbsp;<tt>3 x 3</tt>&nbsp;matrix with randomly generated entries distributed uniformly between 0 and 1.</p>
<p>Individual matrix and vector entries can be referenced with indices inside parentheses in the usual manner. For example,&nbsp;<tt>A[1,2]</tt>&nbsp;denotes the entry in the <strong>second</strong> row, <strong>third</strong> column of matrix&nbsp;<tt>A</tt>&nbsp;&nbsp;- this is because in Python (as well as in C and Fortran) the first element is [0]. Try it. A matrix or a vector will only accept&nbsp;<em>positive</em>&nbsp;integers as indices.</p>

︡6d9187ce-d54a-426e-abb4-1e68031c3f7b︡{"html": "<p>creates the 9 element array (index from 0 to 8) and reshaped into an obvious 3-by-3 matrix and assigns it to a variable&nbsp;<tt>A. Alternative way to create 3 x 3 matrix is to give in in square brackets, as in B assignment.</tt></p>\n<p>The built-in functions&nbsp;<tt>rand</tt>,&nbsp;<tt>magic</tt>, and&nbsp;<tt>hilb</tt>, for example, provide an easy way to create matrices with which to experiment. The command&nbsp;<tt>rand(3,3)</tt>&nbsp;created an&nbsp;<tt>3 x 3</tt>&nbsp;matrix with randomly generated entries distributed uniformly between 0 and 1.</p>\n<p>Individual matrix and vector entries can be referenced with indices inside parentheses in the usual manner. For example,&nbsp;<tt>A[1,2]</tt>&nbsp;denotes the entry in the <strong>second</strong> row, <strong>third</strong> column of matrix&nbsp;<tt>A</tt>&nbsp;&nbsp;- this is because in Python (as well as in C and Fortran) the first element is [0]. Try it. A matrix or a vector will only accept&nbsp;<em>positive</em>&nbsp;integers as indices.</p>"}︡
︠bd575213-5a3c-4ab3-afd4-999caabe423e︠
A[1,2]; A[0,0]
︡a7b19e66-fc24-4913-a903-a67247850326︡{"stdout": "6\n1"}︡
︠73345b15-c2f2-45a8-85fd-6d190bb8b675i︠
%html
<p>Access to sub-arrays is by using colon [:], i.e. to access the first row &nbsp;we use A[0,:] which means, first index is 0, second index is ALL. Obviously to get the column we need A[:,0]. Also A[:,:] will work - giving back the full matrix.&nbsp;</p>
<p>&nbsp;</p>

︡a8c79438-aca0-44de-bfb4-a4e15e7f8b46︡{"html": "<p>Access to sub-arrays is by using colon [:], i.e. to access the first row &nbsp;we use A[0,:] which means, first index is 0, second index is ALL. Obviously to get the column we need A[:,0]. Also A[:,:] will work - giving back the full matrix.&nbsp;</p>\n<p>&nbsp;</p>"}︡
︠16bb9b89-e429-4442-841f-eb81839ead9b︠
A[0,:]; A[:,0]; A[:,:]
︡a4941da8-182f-4972-a99d-ff4512a6c1b0︡{"stdout": "array([1, 2, 3])\narray([1, 4, 7])\narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])"}︡
︠e62a2427-31a3-4a87-a872-26fb981130aci︠
%html
<h4>Array operators:</h4>
<p><em>All</em>&nbsp;operations (<tt style="font-size: 1.25em;">*</tt>,&nbsp;<tt style="font-size: 1.25em;">/</tt>,&nbsp;<tt style="font-size: 1.25em;">+</tt>,&nbsp;<tt style="font-size: 1.25em;">**</tt>&nbsp;etc.) are elementwise.&nbsp;</p>
<ol>
<li>It is highly recommended to look through the examples of various functions and conventions: <a title="Numpy examples" href="http://www.scipy.org/Numpy_Example_List_With_Doc" target="_blank">http://www.scipy.org/Numpy_Example_List_With_Doc</a></li>
<li>If you have some Matlab experience, please read <a title="Numpy for Matlab users" href="http://www.scipy.org/NumPy_for_Matlab_Users" target="_blank">http://www.scipy.org/NumPy_for_Matlab_Users</a></li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>

︡56b112e7-dbb1-4a5e-815b-c9c99e097875︡{"html": "<h4>Array operators:</h4>\n<p><em>All</em>&nbsp;operations (<tt style=\"font-size: 1.25em;\">*</tt>,&nbsp;<tt style=\"font-size: 1.25em;\">/</tt>,&nbsp;<tt style=\"font-size: 1.25em;\">+</tt>,&nbsp;<tt style=\"font-size: 1.25em;\">**</tt>&nbsp;etc.) are elementwise.&nbsp;</p>\n<ol>\n<li>It is highly recommended to look through the examples of various functions and conventions: <a title=\"Numpy examples\" href=\"http://www.scipy.org/Numpy_Example_List_With_Doc\" target=\"_blank\">http://www.scipy.org/Numpy_Example_List_With_Doc</a></li>\n<li>If you have some Matlab experience, please read <a title=\"Numpy for Matlab users\" href=\"http://www.scipy.org/NumPy_for_Matlab_Users\" target=\"_blank\">http://www.scipy.org/NumPy_for_Matlab_Users</a></li>\n</ol>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>"}︡
︠7be273af-3d59-4c0e-8bf7-6ca30863b7c4︠
print A*B
print A**2
print A*B/A**2
print divide(A,B) # explicit is better than implicit
print multiply(A,B)
print dot(A,A[:,0])
print dot(A[1,:],A)
︡0b91c7a3-4fd5-4055-882a-42ec8c03cdbe︡{"stdout": "[[ 1  4  9]\n [16 25 36]\n [49 64 81]]\n[[ 1  4  9]\n [16 25 36]\n [49 64 81]]\n[[1 1 1]\n [1 1 1]\n [1 1 1]]\n[[1 1 1]\n [1 1 1]\n [1 1 1]]\n[[ 1  4  9]\n [16 25 36]\n [49 64 81]]\n[ 30  66 102]\n[66 81 96]"}︡









